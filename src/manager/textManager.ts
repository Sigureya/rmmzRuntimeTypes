export interface TextManager_Interface {
  basic(basicId: number): string;
  param(paramId: number): string;
  command(commandId: number): string;
  message(messageId: number): string;
  get level(): string;
  get levelA(): string;
  get hp(): string;
  get hpA(): string;
  get mp(): string;
  get mpA(): string;
  get tp(): string;
  get tpA(): string;
  get exp(): string;
  get expA(): string;
  get fight(): string;
  get escape(): string;
  get attack(): string;
  get guard(): string;
  get item(): string;
  get skill(): string;
  get equip(): string;
  get status(): string;
  get formation(): string;
  get save(): string;
  get gameEnd(): string;
  get options(): string;
  get weapon(): string;
  get armor(): string;
  get keyItem(): string;
  get equip2(): string;
  get optimize(): string;
  get clear(): string;
  get newGame(): string;
  get continue_(): string;
  get toTitle(): string;
  get cancel(): string;
  get buy(): string;
  get sell(): string;
  get alwaysDash(): string;
  get commandRemember(): string;
  get touchUI(): string;
  get bgmVolume(): string;
  get bgsVolume(): string;
  get meVolume(): string;
  get seVolume(): string;
  get possession(): string;
  get expTotal(): string;
  get expNext(): string;
  get saveMessage(): string;
  get loadMessage(): string;
  get file(): string;
  get autosave(): string;
  get partyName(): string;
  get emerge(): string;
  get preemptive(): string;
  get surprise(): string;
  get escapeStart(): string;
  get escapeFailure(): string;
  get victory(): string;
  get defeat(): string;
  get obtainExp(): string;
  get obtainGold(): string;
  get obtainItem(): string;
  get levelUp(): string;
  get obtainSkill(): string;
  get useItem(): string;
  get criticalToEnemy(): string;
  get criticalToActorU(): string;
  get actorDamage(): string;
  get actorRecovery(): string;
  get actorGain(): string;
  get actorLoss(): string;
  get actorDrain(): string;
  get actorNoDamage(): string;
  get actorNoHit(): string;
  get enemyDamage(): string;
  get enemyRecovery(): string;
  get enemyGain(): string;
  get enemyLoss(): string;
  get enemyDrain(): string;
  get enemyNoDamage(): string;
  get enemyNoHit(): string;
  get evasion(): string;
  get magicEvasion(): string;
  get magicReflection(): string;
  get counterAttack(): string;
  get substitute(): string;
  get buffAdd(): string;
  get debuffAdd(): string;
  get buffRemove(): string;
  get actionFailure(): string;
}
